// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel WaveformRenderer

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct WaveformTick
{
    float loudness;
    // float time;
};
// struct WaveformBlock
// {
//     float worldPosY;
//     float3 color;
// };
struct csInput
{
    uint3 GroupID           : SV_GroupID;           // 3D index of the thread group in the dispatch.
    uint3 GroupThreadID     : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
    uint3 DispatchThreadID  : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
    uint  GroupIndex        : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

RWStructuredBuffer<WaveformTick> _WaveformTicks;
RWStructuredBuffer<float3> _WaveformOutputs;
float _Time;

[numthreads(8,8,1)]
void WaveformRenderer (csInput cs_IDs)
{
    // TODO: insert actual code here!
    uint id =  cs_IDs.GroupID.x * 64 + cs_IDs.GroupThreadID.x * 8 + cs_IDs.GroupThreadID.y;
    _WaveformOutputs[id] = float3(0, abs(_WaveformTicks[id].loudness*50), id * 0.05);
    // _WaveformOutputs[id].color = float3(_WaveformTicks[id].loudness, _WaveformTicks[id].loudness, 0);
    // Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}
