// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SpectrumRenderer

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
// struct SpectrumColor
// {
//     float3 color;
//     float3 position;
// };
RWStructuredBuffer<float> Waveform;
RWTexture2D<float4> Result;
uint TotalSample;
[numthreads(32,32,1)]
void SpectrumRenderer (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    // int index = id.x + id.y * 8 * 8;
    // int idx1 = id;
    uint d = TotalSample / 1024;
    float t;
    for (int i = d*(id.x-0.5);i< d*(id.x+0.5)/1024;i++)
    {
        t += Waveform[i];
    }
    t /= d;
    float h = (id.y-32)/32;
    Result[id.xy] =float4((id.x -512)<2 , h<t + (id.y-32==0), 0, 1);
}
//全长c = section*_audiosamples个，分成1024段，每段d = c/1024个
//id.x总长1024，id.x获取waveform[d*(id.x-0.5)]到waveform[d*(id.x+0.5)]的数据求平均值t
//id.y总长64，t值对应abs(id.y-32)/32,abs(id.y-32)/32<t时为绿色
//id.x为512/513时为红
